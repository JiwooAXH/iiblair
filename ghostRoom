local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera
local ZonesFolder = workspace.Map:FindFirstChild("Zones")

local ESPParts = {}
local currentZone = nil
local lastUpdate = 0
local updateInterval = 0.01 -- Updates every 0.1 seconds

if not ZonesFolder then
    warn("Zones folder not found! Check path.")
    return
end

local function getPlayer()
    return Players.LocalPlayer and Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
end

local function formatTemp(value)
    return string.format("%.2f", value)
end

local function formatDistance(value)
    return string.format("%.1f", value)
end

local function isValidZone(zone)
    return zone:IsA("BasePart") and zone:FindFirstChild("_____Temperature") and not string.find(zone.Name:lower(), "outside")
end

local function findColdestValidZone()
    local lowestTemp = math.huge
    local coldestZone, coldestZoneName = nil, "Unknown"

    for _, zone in pairs(ZonesFolder:GetChildren()) do
        if isValidZone(zone) then
            local temp = zone._____Temperature.Value
            if temp < lowestTemp then
                lowestTemp = temp
                coldestZone = zone
                coldestZoneName = zone.Name
            end
        end
    end
    return coldestZone, lowestTemp, coldestZoneName
end

local function createESP(target)
    -- Clear old ESP
    for _, part in pairs(ESPParts) do
        if typeof(part) == "table" then
            for _, line in pairs(part) do
                line:Remove()
            end
        else
            part:Destroy()
        end
    end
    ESPParts = {}

    -- Create 3D Box Outline
    local lines = {}
    for i = 1, 12 do
        local line = Drawing.new("Line")
        line.Color = Color3.fromRGB(255, 255, 255)
        line.Thickness = 1.5
        table.insert(lines, line)
    end
    ESPParts["Lines"] = lines
    ESPParts["Target"] = target

    -- Create Billboard GUI
    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = target
    billboard.Size = UDim2.new(8, 0, 4, 0) -- Default size
    billboard.StudsOffset = Vector3.new(0, target.Size.Y + 2, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = game.CoreGui
    ESPParts["Label"] = billboard

    local function createTextLabel(parent, position, color, font, fontSize)
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0.2, 0)
        label.Position = position
        label.BackgroundTransparency = 1
        label.TextScaled = true
        label.Font = font
        label.TextStrokeTransparency = 0
        label.TextColor3 = color
        label.Parent = parent
        return label
    end

    ESPParts["Title"] = createTextLabel(billboard, UDim2.new(0, 0, 0, 0), Color3.fromRGB(255, 102, 102), Enum.Font.GothamBold) -- "Ghost Room"
    ESPParts["Zone"] = createTextLabel(billboard, UDim2.new(0, 0, 0.2, 0), Color3.fromRGB(255, 255, 255), Enum.Font.GothamBold) -- Zone Name
    ESPParts["Temp"] = createTextLabel(billboard, UDim2.new(0, 0, 0.4, 0), Color3.fromRGB(100, 200, 255), Enum.Font.Gotham) -- Temperature
    ESPParts["Distance"] = createTextLabel(billboard, UDim2.new(0, 0, 0.6, 0), Color3.fromRGB(200, 200, 200), Enum.Font.Gotham) -- Distance
end

local function updateESP(target, temp, zoneName)
    local player = getPlayer()
    if not player or not ESPParts["Lines"] or not target then return end

    -- Get corner positions of the ghost room box
    local size = target.Size * 0.5
    local position = target.Position
    local corners = {
        position + Vector3.new(-size.X, -size.Y, -size.Z),
        position + Vector3.new(size.X, -size.Y, -size.Z),
        position + Vector3.new(size.X, -size.Y, size.Z),
        position + Vector3.new(-size.X, -size.Y, size.Z),
        position + Vector3.new(-size.X, size.Y, -size.Z),
        position + Vector3.new(size.X, size.Y, -size.Z),
        position + Vector3.new(size.X, size.Y, size.Z),
        position + Vector3.new(-size.X, size.Y, size.Z)
    }

    local projectedCorners = {}
    local onScreen = false
    for i, corner in pairs(corners) do
        local vector, visible = Camera:WorldToViewportPoint(corner)
        projectedCorners[i] = vector
        if visible then onScreen = true end
    end

    if onScreen then
        local lines = ESPParts["Lines"]
        local edges = {
            {1, 2}, {2, 3}, {3, 4}, {4, 1}, -- Bottom square
            {5, 6}, {6, 7}, {7, 8}, {8, 5}, -- Top square
            {1, 5}, {2, 6}, {3, 7}, {4, 8}  -- Vertical lines
        }

        for i, edge in pairs(edges) do
            local from = projectedCorners[edge[1]]
            local to = projectedCorners[edge[2]]
            lines[i].From = Vector2.new(from.X, from.Y)
            lines[i].To = Vector2.new(to.X, to.Y)
            lines[i].Visible = true
        end

        -- Distance calculation and fade effect
        local distance = (player.Position - target.Position).Magnitude
        local fadeFactor = math.clamp(distance / 50, 0, 20) -- Fades when close
        for _, line in pairs(lines) do
            line.Transparency = fadeFactor
        end

        -- Billboard Scaling
        local newScale = math.clamp(distance / 180 * 7.0, 0.3, 7.0)
        TweenService:Create(ESPParts["Label"], TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Size = UDim2.new(9 * newScale, 0, 7 * newScale, 0)
        }):Play()

        -- Text Updates
        ESPParts["Title"].Text = "Ghost Room"
        ESPParts["Zone"].Text = zoneName
        ESPParts["Temp"].Text = "Temp: " .. formatTemp(temp) .. "Â°C"
        ESPParts["Distance"].Text = "Dist: " .. formatDistance(distance) .. "m"
    else
        for _, line in pairs(ESPParts["Lines"]) do
            line.Visible = false
        end
    end
end

RunService.RenderStepped:Connect(function()
    local now = tick()
    if now - lastUpdate < updateInterval then return end
    lastUpdate = now

    local newZone, temp, zoneName = findColdestValidZone()

    if newZone and newZone ~= currentZone then
        currentZone = newZone
        createESP(newZone)
    end

    if newZone then
        updateESP(newZone, temp, zoneName)
    end
end)
